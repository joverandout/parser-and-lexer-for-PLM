/* Generated By:JavaCC: Do not edit this line. Assignment.java */
import java.util.*;

public class Assignment implements AssignmentConstants {

  int numberOfMains = 0;
  ArrayList<String> functionCalls = new ArrayList<String>();
  ArrayList<String> functionNames = new ArrayList<String>();

  String currFunc = "";

  int numberOfBracs = 0;

  HashMap<String, ArrayList<String>> allFuncs = new HashMap<String, ArrayList<String>>();

  Boolean divergance = false;
  ArrayList<Integer> mainLineNos = new ArrayList<Integer>();
  int line = 1;

  int bracNumber = 0;
  String functionString = "";


  public static void main(String args [])  throws ParseException, TokenMgrError {

    Assignment parser = new Assignment(System.in);

    try {
      parser.Start();
    } catch (ParseException e) {
      displayError(e.getMessage(), parser.line);
    }
    catch (TokenMgrError e) {
      displayError("Invalid character in function", parser.line);
    }

    if(!parser.divergance){
      String decomposedFunction = decomposeFunction(parser, "MAIN", "");
      if(countbracs(decomposedFunction)==-1){
        decomposedFunction += ")";
      }
      else if(countbracs(decomposedFunction)==1){
        decomposedFunction = "(" + decomposedFunction;
      }
      System.out.println(decomposedFunction);
      int answer = evaluateDecomposedFunction(decomposedFunction);
      System.out.println(answer);
    }

    System.exit(0);
  }

  public static int countbracs(String decom){
    int[] count = new int[2];
    char [] chars = decom.toCharArray();
    for(char c : chars){
      if(c == '(') count[0]++;
      else if(c==')') count[1]++;
    }
    if(count[0]>count[1]) return -1;
    else if(count[1]>count[0]) return 1;
    return 0;
  }

  public static int evaluateDecomposedFunction(String decomposedFunc){
    Stack<Integer> operands = new Stack<Integer>();
    Stack<Character> operators = new Stack<Character>();

    char[] decomposedFuncChars = decomposedFunc.toCharArray();
    StringBuffer sbuf = new StringBuffer();
    Boolean buffer = false;

    for(char currChar : decomposedFuncChars ){
      if(currChar >= '0' && currChar <= '9'){
        if(buffer == false){
          sbuf = new StringBuffer();
          sbuf.append(currChar);
          buffer = true;
        }
        else if(buffer == true){
          sbuf.append(currChar);
        }
      }
      else if(currChar == '('){
        if(buffer){
          buffer = false;
          operands.push(Integer.parseInt(sbuf.toString()));
        }
        operators.push(currChar);
      }
      else if(currChar == ')'){
        if(buffer){
          buffer = false;
          operands.push(Integer.parseInt(sbuf.toString()));
        }
        while(operators.peek() != '('){
          operands.push(calculateOperation(operators.pop(), operands.pop(), operands.pop()));
        }
        operators.pop();
      }
      if(currChar == '+' || currChar=='*'){
        if(buffer){
          buffer = false;
          operands.push(Integer.parseInt(sbuf.toString()));
        }
        while(!operators.empty() && precedence(currChar, operators.peek()))
        {
          operands.push(calculateOperation(operators.pop(), operands.pop(), operands.pop()));
        }

        operators.push(currChar);

      }
    }

    while(!operators.empty()){
      operands.push(calculateOperation(operators.pop(), operands.pop(), operands.pop()));
    }
    return operands.pop();
  }

  public static boolean precedence(char op1, char op2)
  {
    if ((op2 == '(' || op2 == ')') || (op1 == '*' && op2 == '+')) return false;
    return true;
  }

  public static int calculateOperation(char operator, int operand1, int operand2){
    if(operator == '+') return operand1 + operand2;
    if(operator == '*') return operand1 * operand2;
    return 0;
  }

  public static void displayError(String errorMessage, int line) {
    System.out.println("FAIL");
    System.err.println(line);
    System.err.println(errorMessage);
    System.exit(0);
  }

  public static String decomposeFunction(Assignment parser, String function, String parameter) {
    ArrayList<String> functionBody = parser.allFuncs.get(function);
    String newFunction = "";
    boolean decomposed = false;

    for(int i = 0; i < functionBody.size(); i++){
      Boolean isNum = true;
      int a = 0;
      try{a = Integer.parseInt(functionBody.get(i));} catch (NumberFormatException e) {isNum = false;}
      if (isNum == true) newFunction += Integer.parseInt(functionBody.get(i));
      else if(isNum == false){
        Boolean isParam = true;
        char[] chars = functionBody.get(i).toCharArray();
        for(int j =0; j < chars.length; j++){
          if(Character.isLowerCase(chars[j]) == false){
            isParam = false;
          }
        }
        if(isParam == true){
          while (true) {
            String func = getFunctionOutOfAString(parameter, 0, parameter.length(), false, false);
            if (func != null) {
              String funcCall = "";
              for (int k = 0; k < func.length(); k++) {
                  if (Character.toString(func.charAt(k)).equals("(")) {
                      k = 999;
                      break;
                  }
                  funcCall += func.charAt(k);
              }
              String funcParams = "";
              int openBrackets = 0;
              int closedBrackets = 0;
              char [] chars3 = func.toCharArray();
              for (int k = 0; k < chars3.length; k++) {
                  if (chars3[k] == '(') {
                      openBrackets++;
                  } else if (chars3[k] == ')') {
                      closedBrackets++;
                  }

                  if (openBrackets > closedBrackets) {
                      funcParams += func.charAt(k);
                  }
              }
              funcParams = funcParams.substring(1);
              String call = "(" + decomposeFunction(parser, funcCall, funcParams) + ")";
              parameter = parameter.replace(func, call);
            } else {break;}
          }
          newFunction += "(" + parameter + ")";
        }
        else if(functionBody.get(i) == "+" || functionBody.get(i) == "*"){
          newFunction += functionBody.get(i);
        }
        else{
          char[] tempChars = functionBody.get(i).toCharArray();
          if(Character.isUpperCase(tempChars[0])){
            String funcCall = "";
            for (int k = 0; k < functionBody.get(i).length(); k++) {
                if (tempChars[k] == '(') {
                    k = 999;
                    break;
                }
                funcCall += tempChars[k];
            }
            String funcParams = reduceFunctionBody(functionBody.get(i));
            String Foundparameter = getFunctionOutOfAString(funcParams, 0, funcParams.length(), false, true);
            if (Foundparameter != null) {
                funcParams = funcParams.replace(Foundparameter, parameter);
            }
            String call = decomposeFunction(parser, funcCall, funcParams);
            newFunction += "(" + call + ")";
          }
        }
      }
    }
    return newFunction;
  }

  public static String reduceFunctionBody(String func) {
        String funcParams = "";
        int openBrackets = 0;
        int closedBrackets = 0;
        char [] chars2 = func.toCharArray();
        for (int i = 0; i < chars2.length; i++) {
            if (chars2[i] == '(') {
                openBrackets++;
            } else if (chars2[i] == ')') {
                closedBrackets++;
            }

            if (openBrackets > closedBrackets) {
                funcParams += func.charAt(i);
            }
        }
        funcParams = funcParams.substring(1);
        return funcParams;
    }


  public static String getFunctionOutOfAString(String FunctionString, int start, int end, boolean finish, boolean param) {
    char[] stringArray = FunctionString.toCharArray();
    for (int i = 0; i < stringArray.length; i++) {
        if ((Character.isUpperCase(stringArray[i]) && !param) || (Character.isLowerCase(stringArray[i]) && param)) {
            if (!finish){
                start = i;
                finish = true;
            }
        } else if ((stringArray[i]==')' && !param) || param) {
            if (finish) {
                finish = false;
                end = i;
                return FunctionString.substring(start, end+1);
            }
        }
    }
    return null;
  }

//brac one is used at the beginning of a function as a valid
  final public void bracOne() throws ParseException {
    jj_consume_token(OPENCURLYBRAC);
    jj_consume_token(SPACE);
  }

//brac two is used at the end of a function as a valid function always ends "} ;\n"
  final public void bracTwo() throws ParseException {
    try {
      jj_consume_token(CLOSECURLYBRAC);
      jj_consume_token(SPACE);
      jj_consume_token(SEMICOLON);
    } catch (ParseException e) {
                                          displayError("Incorrect syntax: Missing ' } ; ' at the end of the function", line);
    }
    try {
      jj_consume_token(LINEEND);
    } catch (ParseException e) {
                                            displayError("Missing line end after function declaration", line);
    }
      line++;
  }

  final public void Start() throws ParseException {
  Token firstToken = null;
  Token secondToken = null;
  String funcBody = "";
    label_1:
    while (true) {
      try {
        jj_consume_token(DEFINITION);
      } catch (ParseException e) {
                                                 {if (true) throw new ParseException("Missing keyword DEF");}
      }
      try {
        jj_consume_token(SPACE);
      } catch (ParseException e) {
                                            {if (true) throw new ParseException("Missing function name after keyword DEF");}
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAIN:
        firstToken = jj_consume_token(MAIN);
        jj_consume_token(SPACE);
        numberOfMains++;
        mainLineNos.add(line);
        if(numberOfMains > 1){
          displayError("MAIN is defined more than once", line);
        }
        functionNames.add(firstToken.image.toString());
        currFunc = firstToken.image.toString();
        allFuncs.put(currFunc, new ArrayList<String>());
        try {
          funcBody = checkmain(firstToken);
        } catch (TokenMgrError e) {
                               displayError("Invalid character in function", line);
        } catch (ParseException e) {
                                displayError("Missing main function body", line);
        }
        break;
      case FUNC:
        try {
          secondToken = jj_consume_token(FUNC);
          jj_consume_token(SPACE);
        } catch (ParseException e) {
                                         displayError("Invalid or missing function name", line);
        } catch (TokenMgrError e) {
                                                                                                                           displayError("Invalid character in function name", line);
        }
        if(functionNames.contains(secondToken.image.toString())){
          displayError("Function " + secondToken.image.toString() + " defined more than once", line);
        }
        functionNames.add(secondToken.image.toString());
        currFunc = secondToken.image.toString();
        allFuncs.put(currFunc, new ArrayList<String>());
        try {
          funcBody = checkfunction(secondToken);
        } catch (TokenMgrError e) {
                               displayError("Invalid character in function", line);
        }
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DEFINITION:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(0);
    for(int i = 0; i < functionCalls.size(); i++){
        if(!functionNames.contains(functionCalls.get(i))){
          displayError("Undefined Function " + functionCalls.get(i) +" used in Function body", line);
        }
    }
    if (numberOfMains == 0) {
      displayError("MAIN is not defined in the program", 0);
    }
    System.out.println("PASS");
    if(divergance) System.out.println("DIVERGENCE");
  }

  final public String checkfunction(Token outerFunc) throws ParseException {
  String funcBody = "";
  Token parameterVaraible;
    parameterVaraible = jj_consume_token(PARAMETER);
    jj_consume_token(SPACE);
    try {
      bracOne();
    } catch (ParseException e) {
                                             displayError("Incorrect syntax: Missing ' ( ' before function body", line);
    }
    funcBody = evaluateFunctionBody(parameterVaraible, outerFunc);
    jj_consume_token(SPACE);
    bracTwo();
   {if (true) return funcBody;}
    throw new Error("Missing return statement in function");
  }

  final public String checkmain(Token main) throws ParseException {
  String funcBody = "";
    try {
      bracOne();
    } catch (ParseException e) {
                                             displayError("Main cannot have any parameters", line);
    }
    funcBody = evaluateFunctionBody(null, main);
    jj_consume_token(SPACE);
    bracTwo();
   {if (true) return funcBody;}
    throw new Error("Missing return statement in function");
  }

  final public String evaluateFunctionBody(Token parameter, Token outerFunction) throws ParseException {
  Token num;
  Token param;
  Token function;
  String funcBody = "";
  String operator = "";
  String funcCall = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DIGIT:
      num = jj_consume_token(DIGIT);
      funcBody += num.image.toString();
      functionString += num.image.toString();
      if(bracNumber == 0){
        allFuncs.get(currFunc).add(functionString);
        functionString ="";
      }
      break;
    case PARAMETER:
      param = jj_consume_token(PARAMETER);
      if (parameter != null){
        if(param.image.toString().equals(parameter.image.toString()) == false){
          displayError("Parameters do not match. '" + param + "' was received but '" + parameter.image.toString() + "' was expected", line);
        }
      }
      else if(mainLineNos.contains(line)) //if the parameter is null then that means we are in a main function and so if the parameter occurs we cannot allow tis
      {
        displayError("MAIN function cannot include parameters", line);
      }
      funcBody += param.image.toString();
      functionString += param.image.toString();
      if(bracNumber == 0){
        allFuncs.get(currFunc).add(functionString);
        functionString ="";
      }
      break;
    case FUNC:
      function = jj_consume_token(FUNC);
     functionString += function.image.toString();
      try {
        jj_consume_token(OPENBRAC);
      } catch (ParseException e) {
                                              displayError("Missing '(' in function call", line);
      }
      bracNumber++;
      functionString += "(";
      functionCalls.add(function.image.toString());
      if(function.image.toString().equals(currFunc)){
        divergance = true;
      }
      try{funcCall = evaluateFunctionBody(null, function);} catch (TokenMgrError e) {displayError("Use of invalid character in function", line);}
      catch (ParseException e) {displayError("Missing or invalid argument in call of " + function.image.toString() + " function", line);}
      funcBody += funcCall;
      try {
        jj_consume_token(CLOSEBRAC);
      } catch (ParseException e) {
                                               displayError("Missing ')' in function call", line);
      }
      bracNumber --;
      functionString += ")";
      if(bracNumber == 0){
        allFuncs.get(currFunc).add(functionString);
        functionString = "";
      }
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIGIT:
      case PLUS:
      case MULTIPLY:
      case PARAMETER:
      case FUNC:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      try {
        operator = operators();
      } catch (ParseException e) {
                                                          {if (true) throw new ParseException ("Missing operator, either * or + required");}
      }
      if(operator.equals("e")) displayError("Missing operator, either * or + required", line);
      funcBody += operator;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIGIT:
        num = jj_consume_token(DIGIT);
      funcBody += num.image.toString();
      functionString += num.image.toString();
      if(bracNumber == 0){
        allFuncs.get(currFunc).add(functionString);
        functionString ="";
      }
        break;
      case PARAMETER:
        param = jj_consume_token(PARAMETER);
      if (parameter != null){
        if(param.image.toString().equals(parameter.image.toString()) == false){
          displayError("Parameters do not match. '" + param + "' was received but '" + parameter.image.toString() + "' was expected", line);
        }
      }
      else if(mainLineNos.contains(line)) //if the parameter is null then that means we are in a main function and so if the parameter occurs we cannot allow tis
      {
        displayError("MAIN function cannot include parameters", line);
      }
      funcBody += param.image.toString();
      functionString += param.image.toString();
      if(bracNumber == 0){
        allFuncs.get(currFunc).add(functionString);
        functionString ="";
      }
        break;
      case FUNC:
        function = jj_consume_token(FUNC);
     functionString += function.image.toString();
        try {
          jj_consume_token(OPENBRAC);
        } catch (ParseException e) {
                                              displayError("Missing '(' in function call", line);
        }
      bracNumber++;
      functionString += "(";
      functionCalls.add(function.image.toString());
      if(function.image.toString().equals(currFunc)){
        divergance = true;
      }
      try{funcCall = evaluateFunctionBody(null, function);} catch (TokenMgrError e) {displayError("Use of invalid character in function", line);}
      catch (ParseException e) {displayError("Missing or invalid argument in call of " + function.image.toString() + " function", line);}
      funcBody += funcCall;
        try {
          jj_consume_token(CLOSEBRAC);
        } catch (ParseException e) {
                                               displayError("Missing ')' in function call", line);
        }
      bracNumber --;
      functionString += ")";
      if(bracNumber == 0){
        allFuncs.get(currFunc).add(functionString);
        functionString = "";
      }
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
   {if (true) return funcBody;}
    throw new Error("Missing return statement in function");
  }

  final public String operators() throws ParseException {
  Token operator;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        operator = jj_consume_token(PLUS);
      if(bracNumber == 0){
        allFuncs.get(currFunc).add("+");
      }
      else{
        functionString += "+";
      }
      {if (true) return "+";}
        break;
      case MULTIPLY:
        operator = jj_consume_token(MULTIPLY);
      if(bracNumber == 0){
        allFuncs.get(currFunc).add("*");
      }
      else{
        functionString += "*";
      }
      {if (true) return "*";}
        break;
      default:
        jj_la1[5] = jj_gen;
      {if (true) return "e";}
      }
    } catch (ParseException e) {
                               {if (true) throw new ParseException ("Missing operator, either * or + required");}
    } catch (TokenMgrError e) {
                           {if (true) throw new ParseException ("Missing operator, either * or + required");}
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public AssignmentTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[6];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x102,0x20,0x144,0x15c,0x144,0x18,};
   }

  /** Constructor with InputStream. */
  public Assignment(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Assignment(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AssignmentTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Assignment(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AssignmentTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Assignment(AssignmentTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(AssignmentTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[15];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 6; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 15; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
