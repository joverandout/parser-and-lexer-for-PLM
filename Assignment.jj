options {
        STATIC = false;
}

PARSER_BEGIN(Assignment)

import java.util.*;

public class Assignment{

  int numberOfMains = 0;
  ArrayList<String> functionCalls = new ArrayList<String>();
  ArrayList<String> functionNames = new ArrayList<String>();

  String currFunc = "";

  int numberOfBracs = 0;

  HashMap<String, ArrayList<String>> allFuncs = new HashMap<String, ArrayList<String>>();

  Boolean divergance = false;
  ArrayList<Integer> mainLineNos = new ArrayList<Integer>();
  int line = 1;

  int bracNumber = 0;
  String functionString = "";


  public static void main(String args [])  throws ParseException, TokenMgrError {
   
    Assignment parser = new Assignment(System.in);

    try {
      parser.Start();
    } catch (ParseException e) {
      displayError(e.getMessage(), parser.line);
    }
    catch (TokenMgrError e) {
      displayError("Invalid character in function", parser.line);
    }
    
    if(!parser.divergance){
      String decomposedFunction = decomposeFunction(parser, "MAIN", "");
      int answer = evaluateDecomposedFunction(decomposedFunction);
      System.out.println(answer);
    }

    System.exit(0);
  }

  public static int evaluateDecomposedFunction(String decomposedFunc){
    Stack<Integer> operands = new Stack<Integer>();
    Stack<Character> operators = new Stack<Character>();

    char[] decomposedFuncChars = decomposedFunc.toCharArray();
    StringBuffer sbuf = new StringBuffer();
    Boolean buffer = false;

    for(char currChar : decomposedFuncChars ){
      if(currChar >= '0' && currChar <= '9'){
        if(buffer == false){
          sbuf = new StringBuffer();
          sbuf.append(currChar);
          buffer = true;
        }
        else if(buffer == true){
          sbuf.append(currChar);
        }
      }
      else if(currChar == '('){
        if(buffer){
          buffer = false;
          operands.push(Integer.parseInt(sbuf.toString()));
        }
        operators.push(currChar);
      }
      else if(currChar == ')'){
        if(buffer){
          buffer = false;
          operands.push(Integer.parseInt(sbuf.toString()));
        }
        while(operators.peek() != '('){
          operands.push(calculateOperation(operators.pop(), operands.pop(), operands.pop()));
        }
        operators.pop();
      }
      if(currChar == '+' || currChar=='*'){
        if(buffer){
          buffer = false;
          operands.push(Integer.parseInt(sbuf.toString()));
        }
        while(!operators.empty() && precedence(currChar, operators.peek()))
        {
          operands.push(calculateOperation(operators.pop(), operands.pop(), operands.pop()));
        }

        operators.push(currChar);

      }
    }

    while(!operators.empty()){
      operands.push(calculateOperation(operators.pop(), operands.pop(), operands.pop()));
    }
    return operands.pop();
  }

  public static boolean precedence(char op1, char op2)
  {
    if ((op2 == '(' || op2 == ')') || (op1 == '*' && op2 == '+')) return false;
    return true;
  }

  public static int calculateOperation(char operator, int operand1, int operand2){
    if(operator == '+') return operand1 + operand2;
    if(operator == '*') return operand1 * operand2;
    return 0;
  }

  public static void displayError(String errorMessage, int line) {
    System.out.println("FAIL");
    System.err.println(line);
    System.err.println(errorMessage);
    System.exit(0);
  }

  public static String decomposeFunction(Assignment parser, String function, String parameter) {
    ArrayList<String> functionBody = parser.allFuncs.get(function);
    String newFunction = "";
    boolean decomposed = false;

    for(int i = 0; i < functionBody.size(); i++){
      Boolean isNum = true;
      int a = 0;
      try{a = Integer.parseInt(functionBody.get(i));} catch (NumberFormatException e) {isNum = false;}
      if (isNum == true) newFunction += Integer.parseInt(functionBody.get(i));
      else if(isNum == false){
        Boolean isParam = true;
        char[] chars = functionBody.get(i).toCharArray();
        for(int j =0; j < chars.length; j++){
          if(Character.isLowerCase(chars[j]) == false){
            isParam = false;
          }
        }
        if(isParam == true){
          while (true) {
            String func = getFunctionOutOfAString(parameter, 0, parameter.length(), false, false);
            if (func != null) {
              String funcCall = "";
              for (int k = 0; k < func.length(); k++) {
                  if (Character.toString(func.charAt(k)).equals("(")) {
                      k = 999;
                      break;
                  }
                  funcCall += func.charAt(k);
              }
              String funcParams = "";
              int openBrackets = 0;
              int closedBrackets = 0;
              char [] chars3 = func.toCharArray();
              for (int k = 0; k < chars3.length; k++) {
                  if (chars3[k] == '(') {
                      openBrackets++;
                  } else if (chars3[k] == ')') {
                      closedBrackets++;
                  }

                  if (openBrackets > closedBrackets) {
                      funcParams += func.charAt(k);
                  }
              }
              funcParams = funcParams.substring(1);
              String call = "(" + decomposeFunction(parser, funcCall, funcParams) + ")";
              parameter = parameter.replace(func, call);
            } else {break;}
          }
          newFunction += "(" + parameter + ")";
        }
        else if(functionBody.get(i) == "+" || functionBody.get(i) == "*"){
          newFunction += functionBody.get(i);
        }
        else{
          char[] tempChars = functionBody.get(i).toCharArray();
          if(Character.isUpperCase(tempChars[0])){
            String funcCall = "";
            for (int k = 0; k < functionBody.get(i).length(); k++) {
                if (tempChars[k] == '(') {
                    k = 999;
                    break;
                }
                funcCall += tempChars[k];
            }
            String funcParams = reduceFunctionBody(functionBody.get(i));
            String Foundparameter = getFunctionOutOfAString(funcParams, 0, funcParams.length(), false, true);
            if (Foundparameter != null) {
                funcParams = funcParams.replace(Foundparameter, parameter);
            }
            String call = decomposeFunction(parser, funcCall, funcParams);
            newFunction += "(" + call + ")";
          }
        }
      }
    }
    return newFunction;
  }

  public static String reduceFunctionBody(String func) {
        String funcParams = "";
        int openBrackets = 0;
        int closedBrackets = 0;
        char [] chars2 = func.toCharArray();
        for (int i = 0; i < chars2.length; i++) {
            if (chars2[i] == '(') {
                openBrackets++;
            } else if (chars2[i] == ')') {
                closedBrackets++;
            }

            if (openBrackets > closedBrackets) {
                funcParams += func.charAt(i);
            }
        }
        funcParams = funcParams.substring(1);
        return funcParams;
    }


  public static String getFunctionOutOfAString(String FunctionString, int start, int end, boolean finish, boolean param) {
    char[] stringArray = FunctionString.toCharArray();
    for (int i = 0; i < stringArray.length; i++) {
        if ((Character.isUpperCase(stringArray[i]) && !param) || (Character.isLowerCase(stringArray[i]) && param)) {
            if (!finish){
                start = i;
                finish = true;
            }
        } else if ((stringArray[i]==')' && !param) || param) {
            if (finish) {
                finish = false;
                end = i;
                return FunctionString.substring(start, end+1);
            }
        }
    }
    return null;
  }

}

PARSER_END(Assignment)


TOKEN:
{
  <MAIN : "MAIN">
}

TOKEN : { < DIGIT : (["0"-"9"])+ >
        | < PLUS : "+" >
        | < MULTIPLY : "*" >
        | < DEFINITION : "DEF" >
        | < PARAMETER : (["a"-"z"])+ >
        | < LINEEND : "\n" >
        | < FUNC : (["A"-"Z"])+ >
        | < SEMICOLON : ";" >
        | < SPACE : " " >
        | < OPENBRAC : "(" >
        | < CLOSEBRAC : ")" >
        | < OPENCURLYBRAC : "{" >
        | < CLOSECURLYBRAC : "}" >
        }


//brac one is used at the beginning of a function as a valid
void bracOne(): {}
{
  <OPENCURLYBRAC>
  <SPACE>
}

//brac two is used at the end of a function as a valid function always ends "} ;\n"
void bracTwo(): {}
{
  try{
  <CLOSECURLYBRAC>
  <SPACE>
  <SEMICOLON>} catch (ParseException e) { displayError("Incorrect syntax: Missing ' } ; ' at the end of the function", line);}
  try {<LINEEND>} catch (ParseException e) {displayError("Missing line end after function declaration", line);}
  {
      line++;
  }
}

void Start():{
  Token firstToken = null;
  Token secondToken = null;
  String funcBody = "";
}
{
  (
    try {<DEFINITION>} catch (ParseException e) {throw new ParseException("Missing keyword DEF");}
    try {<SPACE>} catch (ParseException e) {throw new ParseException("Missing function name after keyword DEF");}
    (
      firstToken = <MAIN>
      <SPACE>
      {
        numberOfMains++;
        mainLineNos.add(line);
        if(numberOfMains > 1){
          displayError("MAIN is defined more than once", line);
        }
        functionNames.add(firstToken.image.toString());
        currFunc = firstToken.image.toString();
        allFuncs.put(currFunc, new ArrayList<String>());
      }
      try{
        funcBody = checkmain(firstToken)      
      }
      catch (TokenMgrError e) {displayError("Invalid character in function", line);}
      catch (ParseException e) {displayError("Missing main function body", line);}      
      |
      try{
      secondToken = <FUNC>
      <SPACE>} catch (ParseException e) {displayError("Invalid or missing function name", line);} catch (TokenMgrError e) {displayError("Invalid character in function name", line);}     
      {
        functionNames.add(secondToken.image.toString());
        currFunc = secondToken.image.toString();
        allFuncs.put(currFunc, new ArrayList<String>());
      }
      try{
        funcBody = checkfunction(secondToken)      
      }
      catch (TokenMgrError e) {displayError("Invalid character in function", line);}
      //catch (ParseException e) {displayError("Missing function body", line);}      
    )
  )+
  <EOF>
  {
    for(int i = 0; i < functionCalls.size(); i++){
        if(!functionNames.contains(functionCalls.get(i))){
          displayError("Undefined Function " + functionCalls.get(i) +" used in Function body", line);
        }
    }
    if (numberOfMains == 0) {
      displayError("MAIN is not defined in the program", 0);
    }
    System.out.println("PASS");
    if(divergance) System.out.println("DIVERGENCE");
  }
}

String checkfunction(Token outerFunc):
{
  String funcBody = "";
  Token parameterVaraible;
}
{
  parameterVaraible = <PARAMETER>
  <SPACE>
  try {bracOne()} catch (ParseException e) { displayError("Incorrect syntax: Missing ' ( ' before function body", line);}
  funcBody = evaluateFunctionBody(parameterVaraible, outerFunc)
  <SPACE>
  //FURTHER EVALUATION
  bracTwo()
  {return funcBody;}
}

String checkmain(Token main): {
  String funcBody = "";
}
{
  try {bracOne()} catch (ParseException e) { displayError("Main cannot have any parameters", line);}
  funcBody = evaluateFunctionBody(null, main)
  <SPACE>
  //FURTHER EVALUATION
  bracTwo()
  {return funcBody;}
}

String evaluateFunctionBody(Token parameter, Token outerFunction):
{
  Token num;
  Token param;
  Token function;
  String funcBody = "";
  String operator = "";
  String funcCall = "";
}
{
  (
    num = <DIGIT>
    {
      funcBody += num.image.toString();
      functionString += num.image.toString();
      if(bracNumber == 0){
        allFuncs.get(currFunc).add(functionString);
        functionString ="";
      }
    }
    |
    param = <PARAMETER>
    {
      if (parameter != null){
        if(param.image.toString().equals(parameter.image.toString()) == false){
          displayError("Parameters do not match. '" + param + "' was received but '" + parameter.image.toString() + "' was expected", line);
        }
      }
      else if(mainLineNos.contains(line)) //if the parameter is null then that means we are in a main function and so if the parameter occurs we cannot allow tis
      {
        displayError("MAIN function cannot include parameters", line);
      }
      funcBody += param.image.toString();
      functionString += param.image.toString();
      if(bracNumber == 0){
        allFuncs.get(currFunc).add(functionString);
        functionString ="";
      }
    }
    |
    function = <FUNC>
    {functionString += function.image.toString();}
    try{<OPENBRAC>} catch (ParseException e) {displayError("Missing '(' in function call", line);}
    {
      bracNumber++;
      functionString += "(";
      functionCalls.add(function.image.toString());
      if(function.image.toString().equals(currFunc)){
        divergance = true;
      }
      try{funcCall = evaluateFunctionBody(null, function);} catch (TokenMgrError e) {displayError("Use of invalid character in function", line);}
      catch (ParseException e) {displayError("Missing or invalid argument in call of " + function.image.toString() + " function", line);}
      funcBody += funcCall;
    }
    try{<CLOSEBRAC>} catch (ParseException e) {displayError("Missing ')' in function call", line);}
    {
      bracNumber --;
      functionString += ")";
      if(bracNumber == 0){
        allFuncs.get(currFunc).add(functionString);
        functionString = "";
      }
    }
  )
  (
    try{operator = operators()} catch (ParseException e) {throw new ParseException ("Missing operator, either * or + required");}
    {
      if(operator.equals("e")) displayError("Missing operator, either * or + required", line);
      funcBody += operator;
    }
    (    num = <DIGIT>
    {
      funcBody += num.image.toString();
      functionString += num.image.toString();
      if(bracNumber == 0){
        allFuncs.get(currFunc).add(functionString);
        functionString ="";
      }
    }
    |
    param = <PARAMETER>
    {
      if (parameter != null){
        if(param.image.toString().equals(parameter.image.toString()) == false){
          displayError("Parameters do not match. '" + param + "' was received but '" + parameter.image.toString() + "' was expected", line);
        }
      }
      else if(mainLineNos.contains(line)) //if the parameter is null then that means we are in a main function and so if the parameter occurs we cannot allow tis
      {
        displayError("MAIN function cannot include parameters", line);
      }
      funcBody += param.image.toString();
      functionString += param.image.toString();
      if(bracNumber == 0){
        allFuncs.get(currFunc).add(functionString);
        functionString ="";
      }
    }
    |
    function = <FUNC>
    {functionString += function.image.toString();}
    try{<OPENBRAC>} catch (ParseException e) {displayError("Missing '(' in function call", line);}
    {
      bracNumber++;
      functionString += "(";
      functionCalls.add(function.image.toString());
      if(function.image.toString().equals(currFunc)){
        divergance = true;
      }
      try{funcCall = evaluateFunctionBody(null, function);} catch (TokenMgrError e) {displayError("Use of invalid character in function", line);}
      catch (ParseException e) {displayError("Missing or invalid argument in call of " + function.image.toString() + " function", line);}
      funcBody += funcCall;
    }
    try{<CLOSEBRAC>} catch (ParseException e) {displayError("Missing ')' in function call", line);}
    {
      bracNumber --;
      functionString += ")";
      if(bracNumber == 0){
        allFuncs.get(currFunc).add(functionString);
        functionString = "";
      }
    })
  )*
  {return funcBody; }
}

String operators():
{
  Token operator;
}
{
  try{
  (
    operator = <PLUS>
    {
      if(bracNumber == 0){
        allFuncs.get(currFunc).add("+");
      }
      else{
        functionString += "+";
      }
      return "+";
    } |
    operator = <MULTIPLY>
    {
      if(bracNumber == 0){
        allFuncs.get(currFunc).add("*");
      }
      else{
        functionString += "*";
      }
      return "*";
    }
    |
    {
      return "e";
    }
  )} catch (ParseException e) {throw new ParseException ("Missing operator, either * or + required");}
  catch (TokenMgrError e) {throw new ParseException ("Missing operator, either * or + required");}
}